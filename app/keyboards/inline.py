from typing import Optional

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


class MenuCallBack(CallbackData, prefix='menu'):
    level: int
    menu_name: str
    category_id: Optional[int] = None
    page: int = 1
    product_id: Optional[int] = None
    user_id: Optional[int] = None


def get_main_keyboard(*, level: int, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    buttons = {
        "–¢–æ–≤–∞—Ä—ã üçï": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å ‚ÑπÔ∏è": "about",
        "–û–ø–ª–∞—Ç–∞ üí∞": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ ‚õµ": "shipping",
    }
    for text, menu_name in buttons.items():
        if menu_name == 'catalog':
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level + 1,
                    menu_name=menu_name
                ).pack()
            ))
        elif menu_name == 'cart':
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(level=3, menu_name=menu_name).pack()
            ))
        else:
            keyboard.add(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name
                ).pack()
            ))

    return keyboard.adjust(*sizes).as_markup()


def get_catalog_keyboard(

        *,
        level: int,
        categories: list,
        sizes: tuple[int] = (2,)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥',
        callback_data=MenuCallBack(level=level - 1, menu_name='main').pack()
    ))
    keyboard.add(InlineKeyboardButton(
        text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
        callback_data=MenuCallBack(level=3, menu_name='cart').pack()
    ))

    for category in categories:
        keyboard.add(InlineKeyboardButton(
            text=category.name,
            callback_data=MenuCallBack(
                level=level + 1,
                menu_name=category.name,
                category_id=category.id
            ).pack()
        ))

    return keyboard.adjust(*sizes).as_markup()


def get_products_keyboard(
        *,
        level: int,
        category_id: int,
        page: int,
        next_previous_buttons: dict,
        product_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥',
        callback_data=MenuCallBack(level=level - 1, menu_name='catalog').pack()
    ))
    keyboard.add(InlineKeyboardButton(
        text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
        callback_data=MenuCallBack(level=3, menu_name='cart').pack()
    ))
    keyboard.add(InlineKeyboardButton(
        text='–ö—É–ø–∏—Ç—å üíµ',
        callback_data=MenuCallBack(
            level=level,
            menu_name='add_to_cart',
            product_id=product_id
        ).pack()
    ))

    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in next_previous_buttons.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name,
                    category_id=category_id,
                    page=page + 1).pack()
            ))

        elif menu_name == "previous":
            row.append(InlineKeyboardButton(
                text=text,
                callback_data=MenuCallBack(
                    level=level,
                    menu_name=menu_name,
                    category_id=category_id,
                    page=page - 1).pack()
            ))

    return keyboard.row(*row).as_markup()


def get_user_cart(
        *,
        level: int,
        page: Optional[int],
        pagination_btns: Optional[dict],
        product_id: Optional[int],
        sizes: tuple[int] = (3,)
):
    keyboard = InlineKeyboardBuilder()
    if page:
        keyboard.add(InlineKeyboardButton(
            text='–£–¥–∞–ª–∏—Ç—å',
            callback_data=MenuCallBack(
                level=level,
                menu_name='delete',
                product_id=product_id,
                page=page
            ).pack()
        ))
        keyboard.add(InlineKeyboardButton(
            text='-1',
            callback_data=MenuCallBack(
                level=level,
                menu_name='decrement',
                product_id=product_id,
                page=page
            ).pack()
        ))
        keyboard.add(InlineKeyboardButton(
            text='+1',
            callback_data=MenuCallBack(
                level=level,
                menu_name='increment',
                product_id=product_id,
                page=page
            ).pack()
        ))

        keyboard.adjust(*sizes)

        row = []
        for text, menu_name in pagination_btns.items():
            if menu_name == "next":
                row.append(InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(
                        level=level,
                        menu_name=menu_name,
                        page=page + 1
                    ).pack()
                ))
            elif menu_name == "previous":
                row.append(InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(
                        level=level,
                        menu_name=menu_name,
                        page=page - 1
                    ).pack()
                ))

        keyboard.row(*row)

        row2 = [
            InlineKeyboardButton(
                text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                callback_data=MenuCallBack(level=0, menu_name='main').pack()
            ),
            InlineKeyboardButton(
                text='–ó–∞–∫–∞–∑–∞—Ç—å',
                callback_data=MenuCallBack(level=0, menu_name='order').pack()
            ),
        ]
        return keyboard.row(*row2).as_markup()
    else:
        keyboard.add(
            InlineKeyboardButton(
                text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                callback_data=MenuCallBack(level=0, menu_name='main').pack()
            )
        )

        return keyboard.adjust(*sizes).as_markup()


def get_callback_btns(
        # * - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        *,
        # –í —Å–ª–æ–≤–∞—Ä–µ –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è text –∫–∞–∫ –∫–ª—é—á,
        # –∞ –≤ value - —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –±–æ—Ç—É.
        btns: dict[str, str],
        sizes: tuple[int] = (2,)
):
    keyboard = InlineKeyboardBuilder()
    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ª–æ–≤–∞—Ä—é
    for text, data in btns.items():
        # Reply-–∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–æ–ª—å–∫–æ —Ç–æ,
        # —á—Ç–æ –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —á–∞—Ç, –∞ inline –Ω–µ—Ç.
        # –¢—É—Ç —Å–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫—É.
        # –ü–∞—Ä–∞–º–µ—Ç—Ä text - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è,
        # –∞ –≤ callback_data –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ,
        # –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç —Å–º–æ–∂–µ—Ç –∫–∞–∫ —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        # —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—â–∏–º CallbackQuery-—Å–æ–±—ã—Ç–∏—è.
        # PS: callback_data –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç,
        # —Ç–æ –µ—Å—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∏–¥–∏–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        # PPS: –í–º–µ—Å—Ç–æ callback_data –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å url -
        # —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–∏–ø–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞.
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()


# –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Å URL
def get_url_btns(
        *,
        btns: dict[str, str],
        sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, url in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, url=url))

    return keyboard.adjust(*sizes).as_markup()


# –°–æ–∑–¥–∞—Ç—å –º–∏–∫—Å –∏–∑ CallBack –∏ URL –∫–Ω–æ–ø–æ–∫
def get_inline_mix_btns(
        *,
        btns: dict[str, str],
        sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, value in btns.items():
        if '://' in value:
            keyboard.add(InlineKeyboardButton(text=text, url=value))
        else:
            keyboard.add(InlineKeyboardButton(text=text, callback_data=value))

    return keyboard.adjust(*sizes).as_markup()
